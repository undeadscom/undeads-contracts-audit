const chai = require("chai");
const {
    BN,           // Big Number support
    constants,    // Common constants, like the zero address and largest integers
    expectEvent,  // Assertions for emitted events
    expectRevert, // Assertions for transactions that should fail
    time,         // time advance
    ether,
} = require('@openzeppelin/test-helpers');
chai.use(require('chai-bn')(BN));
const { expect } = chai;
const { parseEvents } = require('../events.js');
const { toWei, fromWei } = require('web3-utils');

const UndeadsStakingUDS = artifacts.require('UndeadsStakingUDS'); 

contract('UndeadsStakingUDS', (accounts) => {
  const [admin, alice, bob, clara, denis, ella, fred, notPriority, hanna, ihor, janny, kasey, liam, priority, dodo] = accounts;
/*   const commonPrice = ether('0.08');
  const discountPrice = ether('0.06');
  const legendaryPrice = ether('20');
 */
    before(async () => {
  /*   this.privilegedFirstAddress = process.env.PRIVILEGED_FIRST_ADDRESS || admin;
    if (!this.privilegedFirstAddress) {
      throw new Error('PRIVILEGED_FIRST_ADDRESS must be defined')
    }
    this.idOfCommonToken = 11;
    this.idOfLegendaryToken = 1;
    this.nextPriceForLegendary = 20;
    const currentBlockchainTime = await time.latest();
    const realTime = new Date().getTime() / 1000 + 20;
    if (currentBlockchainTime > realTime) {
      throw new Error("Wrong time, seems you have to restart ganache if it is persistent");
    } */
  })   

  it('Only owner can set period', async () => {
    const instance = await UndeadsStakingUDS.deployed();
    await instance.setPeriod(1000, { from: admin });
    await expectRevert(instance.setPeriod(0, { from: admin }), "Error, zero periodDelta");
    await expectRevert.unspecified(instance.setPeriod(1000, { from: alice }));
    /* this.idOfCommonToken +=1;
    const instance = await MysteryBox.deployed();

    const limits = await instance.getIssued(alice);
    const total = await instance.total();
    const created = await instance.send(commonPrice, { from: alice });

    const id = parseEvents(created).Created.id.toNumber();
    expect(id).to.be.equal(this.idOfCommonToken);
 
    const owner = await instance.ownerOf(id);
    expect(owner).to.be.equal(alice);

    const rarity = await instance.rarity(id);
    expect(rarity).to.be.false;

    const postLimits = await instance.getIssued(alice);
    expect(postLimits[0].sub(new BN(1))).to.be.bignumber.equal(limits[0]);
    expect(postLimits[1]).to.be.bignumber.equal(limits[1]);
    const tokenURI = await instance.tokenURI(id);
    expect(tokenURI).to.be.equal(`ipfs://QmQjacMtGNScCqsgZyhE4FeDNZfEEC9x2yDetDiQfsGtfZ/mystery/${id}/meta.json`);  
    const postTotal = await instance.total();
    expect(postTotal.sub(total)).to.be.bignumber.equal('1'); */
  });
/* 
  it('Should not be able to buy more than one MysteryBox per account', async () => {
    const instance = await MysteryBox.deployed();
    await expectRevert(instance.send(toWei('0.08', 'ether'), { from: alice }), 'MysteryBox: no more common tokens allowed for user');
  });

  it('Should revert incorrect funds', async () => {
    const instance = await MysteryBox.deployed();
    await expectRevert(instance.send(toWei('10', 'ether'), { from: hanna }), 'MysteryBox: incorrect price');
  });

  it('Should throw an error on non-existing token', async () => {
      const instance = await MysteryBox.deployed();
      const lastId = (await instance.total()).toNumber();
      await expectRevert(instance.rarity(lastId + 555), 'wrong id');
  });

  it('Should increase balance of contract', async () => {
    this.idOfCommonToken +=1;  
    const instance = await MysteryBox.deployed();

    const balanceBefore = await web3.eth.getBalance(instance.address);
    const total = await instance.total();
    const created = await instance.send(commonPrice, { from: bob });
    const id = parseEvents(created).Created.id.toNumber();
    expect(id).to.be.equal(this.idOfCommonToken);
    const balanceAfter = await web3.eth.getBalance(instance.address);
    expect(balanceAfter).to.be.bignumber.greaterThan(balanceBefore);
    expect((new BN(balanceAfter)).sub(new BN(balanceBefore))).to.be.bignumber.equal(commonPrice);
    const postTotal = await instance.total();
    expect(postTotal.sub(total)).to.be.bignumber.equal('1');
  });

  it('Should open Mystery Box, and ensure same ID potion', async () => {
    this.idOfCommonToken +=1;
    const instance = await MysteryBox.deployed();
    const instancePotions = await Potions.deployed();

    const total = await instance.total();
    const created = await instance.send(commonPrice, { from: clara });
    const id = parseEvents(created).Created.id.toNumber();
    expect(id).to.be.equal(this.idOfCommonToken);

    const opened = await instance.open(id, { from: clara });
    await expectRevert(instance.ownerOf(id), 'nonexistent token');

    const ownerOfPotion = await instancePotions.ownerOf(id);
    expect(ownerOfPotion).to.be.equal(clara);
    const potionLevel = await instancePotions.level(id);
    expect(potionLevel).to.be.bignumber.gte(new BN(1));
    expect(potionLevel).to.be.bignumber.lte(new BN(5));
    const postTotal = await instance.total();
    expect(postTotal.sub(total)).to.be.bignumber.equal('1');
  });

  it('Should accept correct funds and create Legendary Box and decrease limits (priority buyer)', async () => {
    this.idOfLegendaryToken += 1;
    this.nextPriceForLegendary += 2;
    const instance = await MysteryBox.deployed();

    const limits = await instance.getIssued(priority);
    const total = await instance.total();
    const created = await instance.send(ether('22'), { from: priority });

    const id = parseEvents(created).Created.id.toNumber();
    expect(id).to.be.equal(this.idOfLegendaryToken);
    const ownerOf = await instance.ownerOf(id);
    expect(ownerOf).to.be.equal(priority);

    const postLimits = await instance.getIssued(priority);
    expect(limits[0]).to.be.bignumber.equal(postLimits[0]);
    expect(postLimits[1].sub(new BN(1))).to.be.bignumber.equal(limits[1]);
    const postTotal = await instance.total();
    expect(postTotal.sub(total)).to.be.bignumber.equal('1');
  });

  it('Should accept correct funds and create Legendary Box and decrease limits (bob)', async () => {
    this.idOfLegendaryToken += 1;
    this.nextPriceForLegendary += 2;
    const instance = await MysteryBox.deployed();

    const limits = await instance.getIssued(bob);
    const total = await instance.total();
    const created = await instance.send(ether(this.nextPriceForLegendary.toString()), { from: bob });

    const id = parseEvents(created).Created.id.toNumber();
    expect(id).to.be.equal(this.idOfLegendaryToken);
    const ownerOf = await instance.ownerOf(id);
    expect(ownerOf).to.be.equal(bob);

    const postLimits = await instance.getIssued(bob);
    expect(limits[0]).to.be.bignumber.equal(postLimits[0]);
    expect(postLimits[1].sub(new BN(1))).to.be.bignumber.equal(limits[1]);
    const postTotal = await instance.total();
    expect(postTotal.sub(total)).to.be.bignumber.equal('1');
  });

  it('Should accept for first reserved token 20eth and issue ONLY for reserved account', async () => {
    const instance = await MysteryBox.deployed();

    await expectRevert(instance.send(ether('20'), { from: kasey }), 'MysteryBox: incorrect price');

    const limits = await instance.getIssued(this.privilegedFirstAddress);
    const total = await instance.total();
    const created = await instance.send(ether('20'), { from: this.privilegedFirstAddress });

    const id = parseEvents(created).Created.id.toNumber();
    expect(id).to.be.equal(1);
    const ownerOf = await instance.ownerOf(id);
    expect(ownerOf).to.be.equal(this.privilegedFirstAddress);

    const postLimits = await instance.getIssued(this.privilegedFirstAddress);
    expect(limits[0]).to.be.bignumber.equal(postLimits[0]);
    expect(postLimits[1].sub(new BN(1))).to.be.bignumber.equal(limits[1]);
    const postTotal = await instance.total();
    expect(postTotal.sub(total)).to.be.bignumber.equal('1');
  });

  it('Should not be able to buy more than one LegendaryBox per account', async () => {
      const instance = await MysteryBox.deployed();
      await expectRevert(instance.send(ether('26'), { from: bob }), 'MysteryBox: no more rare tokens allowed for user');
  });

  it('Should throw an error, wrong person opening', async () => {
    this.idOfCommonToken +=1;
    const instance = await MysteryBox.deployed();

    const created = await instance.send(commonPrice, { from: denis });
    const id = parseEvents(created).Created.id.toNumber();
    expect(id).to.be.equal(this.idOfCommonToken);

    await expectRevert(instance.open(id, { from: bob }), 'wrong owner');
  });

  it('Should throw an error on getting level of burned token', async () => {
    this.idOfCommonToken +=1;
    const instance = await MysteryBox.deployed();

    const created = await instance.send(commonPrice, { from: ihor });
    const id = parseEvents(created).Created.id.toNumber();
    expect(id).to.be.equal(this.idOfCommonToken);
    await instance.open(id, { from: ihor });

    await expectRevert(instance.rarity(id), 'wrong id');
  });

  it('Should not allow buy with discount if not in the list', async () => {
    const instance = await MysteryBox.deployed();
    await expectRevert(instance.send(discountPrice, { from: notPriority }), 'MysteryBox: incorrect price');
  });

  it('Should allow buy FIRST with discount if priority user', async () => {
    this.idOfCommonToken +=1;
    const instance = await MysteryBox.deployed();
    const total = await instance.total();
    const created = await instance.send(discountPrice, { from: priority });
    const id = parseEvents(created).Created.id.toNumber();
    expect(id).to.be.equal(this.idOfCommonToken);
    const postTotal = await instance.total();
    expect(postTotal.sub(total)).to.be.bignumber.equal('1');
  });

  it('Should allow buy SECOND with discount if priority user', async () => {
    this.idOfCommonToken +=1;
    const instance = await MysteryBox.deployed();
    const total = await instance.total();
    const created = await instance.send(discountPrice, { from: priority });
    const id = parseEvents(created).Created.id.toNumber();
    expect(id).to.be.equal(this.idOfCommonToken);
    const postTotal = await instance.total();
    expect(postTotal.sub(total)).to.be.bignumber.equal('1');
  });

  it('Should open Legendary Box (increased price) and ensure Potion is level 5', async () => {
    this.idOfLegendaryToken +=1;
    this.nextPriceForLegendary += 2;
    const instance = await MysteryBox.deployed();
    const instancePotions = await Potions.deployed();
    const total = await instance.total();

    const created = await instance.send(ether(this.nextPriceForLegendary.toString()), { from: liam });
    const id = parseEvents(created).Created.id.toNumber();
    expect(id).to.be.equal(this.idOfLegendaryToken);
    const opened = await instance.open(id, { from: liam });

    const potionId = parseEvents(opened).Opened.id.toNumber();

    const potionLevel = await instancePotions.level(potionId);
    expect(potionLevel).to.be.bignumber.equal(new BN(5));
    const postTotal = await instance.total();
    expect(postTotal.sub(total)).to.be.bignumber.equal('1');
  });

  it('Should NOT allow buy with discount if time is out even for priority user', async () => {
    const oneDay = 8640000;
    await time.increase(oneDay);
    const instance = await MysteryBox.deployed();
    await expectRevert(instance.send(discountPrice, { from: priority }), 'MysteryBox: incorrect price');
  });

  it('Should be able to buy the rest Legendary boxes', async () => {
    const instance = await MysteryBox.deployed();
    const total = await instance.total();
    // 8 times, because 3 boxes generated in prev test
    // BTW: not the best idea, because each test should be independent
    const offset = 4;
    const startPrice = 20;
    const stepPrice = 2;
    const receivers = [denis, ella, fred, janny, hanna, ihor, dodo];
    let price;
    for (let i = offset; i < receivers.length + offset; i++) {
      this.idOfLegendaryToken +=1;
      const from = receivers[i-offset];
      price = toWei((startPrice + i * stepPrice).toString(), 'ether').toString();
      const created = await instance.send(price, { from });
      const id = parseEvents(created).Created.id.toNumber();
      expect(id).to.be.equal(this.idOfLegendaryToken);
    }
    expect(new BN(price)).to.be.bignumber.equal(ether('40'));

    await expectRevert(instance.send(toWei('38', 'ether'), { from: admin }), 'MysteryBox: incorrect price');
    await expectRevert(instance.send(toWei('40', 'ether'), { from: admin }), 'MysteryBox: incorrect price');
    await expectRevert(instance.send(toWei('42', 'ether'), { from: admin }), 'MysteryBox: incorrect price');
    
    const postTotal = await instance.total();
    expect(postTotal.sub(total)).to.be.bignumber.equal('7');
  });

  it('Should not to buy more than defined number of boxes', async () => {
    const instance = await MysteryBox.deployed(); 
    await instance.setCommonLimit(20000);
    await instance.setRareLimit(200);
    let price = toWei('0.08', 'ether').toString();
    for (let i = 0; i < 15; i++) {
      await instance.send(price, { from: admin });
    }
    const total = await instance.total();
    expect(total).to.be.bignumber.equal('15');
    await expectRevert.unspecified(instance.send(toWei('0.08', 'ether'), { from: admin })); 
  });

  it('Should not to buy more expensive boxes than possible', async () => {
    const instance = await MysteryBox.deployed(); 
    let price = toWei('22', 'ether').toString();
    await instance.setCommonLimit(20000);
    await instance.setRareLimit(200);
    // for (let i = 0; i < 15; i++) {
      await instance.send(toWei('22', 'ether').toString(), { from: admin });
      await expectRevert.unspecified(instance.send(toWei('24', 'ether').toString(), { from: admin }));
    // }
    const total = await instance.total();
    expect(total).to.be.bignumber.equal('1');
  });
 */
});
